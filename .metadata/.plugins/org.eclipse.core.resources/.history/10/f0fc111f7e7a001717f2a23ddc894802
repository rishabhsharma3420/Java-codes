package game;

//import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;

public class main extends JFrame implements ActionListener, KeyListener {

	private JLabel lblTimer;
	private JLabel lblScore;
	private JLabel lblWord;
	private JTextField txtWord;
	private JButton btnStart;
	private JButton btnStop;

	private Timer Clocktimer = null;
	private Timer Wordtimer = null;
	private boolean running = false;
	private int timeRemaining = 0;
	private int score = 0;
	private String[] run;

	public main(String[] args) {
		run = args;
		GridLayout layout = new GridLayout(3, 2);
		super.setLayout(layout);

		Font font = new Font("Comic Sans", 2, 100);

		lblTimer = new JLabel("Time");
		lblTimer.setFont(font);
		super.add(lblTimer);

		lblScore = new JLabel("Score");
		lblScore.setFont(font);
		super.add(lblScore);

		lblWord = new JLabel("");
		lblWord.setFont(font);
		super.add(lblWord);

		txtWord = new JTextField("");
		txtWord.addKeyListener(this);
		txtWord.setFont(font);
		super.add(txtWord);

		btnStart = new JButton("Start");
		btnStart.setFont(font);
		btnStart.addActionListener(this);
		super.add(btnStart);

		btnStop = new JButton("Stop");
		btnStop.setFont(font);
		btnStop.addActionListener(this);
		super.add(btnStop);

		super.setTitle("Text Typer");
		super.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		super.setExtendedState(MAXIMIZED_BOTH);
		super.setVisible(true);

		startGame();
	}

	private void startGame() {
		Clocktimer = new Timer(1000, this);
		Clocktimer.setInitialDelay(0);
		Wordtimer = new Timer(3000, this);
		Wordtimer.setInitialDelay(0);
		running = false;
		timeRemaining = 50;
		score = 0;

		lblTimer.setText("Time :" + timeRemaining);
		lblScore.setText("Score :" + score);
		lblWord.setText("");

		btnStop.setEnabled(false);
		txtWord.setEnabled(false);
	}

	@Override
	public synchronized void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnStart) {
			handleStart();
		} else if (e.getSource() == btnStop) {
			handleStop();
		} else if (e.getSource() == Clocktimer) {
			handleClockTimer();
		} else if (e.getSource() == Wordtimer) {
			handleWordtimer();
		}
	}

	private void handleWordtimer() {
		String typed = txtWord.getText().trim();
		String req = lblWord.getText().trim();
		if (typed.length() > 0 && typed.equals(req)) {
			score += 10;
		}
		int ridx = (int) (Math.random() * run.length);
		lblTimer.setText("Time :" + timeRemaining);
		lblScore.setText("Score :" + score);
		lblWord.setText(run[ridx]);
		txtWord.setText("");

	}

	private void handleClockTimer() {
		timeRemaining--;
		int ridx = (int) (Math.random() * run.length);
		lblTimer.setText("Time :" + timeRemaining);
		lblScore.setText("Score :" + score);
		lblWord.setText(run[ridx]);
		txtWord.setText("");
		if (timeRemaining == 0) {
			handleStop();
		}
	}

	private void handleStart() {
		if (running == false) {
			Clocktimer.start();
			Wordtimer.start();
			running = true;

			btnStop.setEnabled(true);
			txtWord.setEnabled(true);
			btnStart.setText("Pause");
		} else {
			Clocktimer.stop();
			Wordtimer.stop();
			running = false;

			btnStop.setEnabled(false);
			txtWord.setEnabled(false);
			btnStart.setText("Start");
		}
	}

	private void handleStop() {
		Clocktimer.stop();
		Wordtimer.stop();
		int choice = JOptionPane.showConfirmDialog(this, "REPLAY ?");
		if (choice == JOptionPane.YES_OPTION) {
			startGame();
		} else if (choice == JOptionPane.NO_OPTION) {
			this.dispose();
		} else if (choice == JOptionPane.CANCEL_OPTION) {
			if (timeRemaining == 0) {
				this.dispose();
			} else {
				Clocktimer.start();
				Wordtimer.start();
			}
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void keyPressed(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
		String typed = txtWord.getText().trim();
		String req = lblWord.getText().trim();
		if (typed.length() > 0 && typed.equals(req)) {
			score += 10;

			int ridx = (int) (Math.random() * run.length);
			lblTimer.setText("Time :" + timeRemaining);
			lblScore.setText("Score :" + score);
			lblWord.setText(run[ridx]);
			txtWord.setText("");
			Wordtimer.restart();
		}

	}

}
