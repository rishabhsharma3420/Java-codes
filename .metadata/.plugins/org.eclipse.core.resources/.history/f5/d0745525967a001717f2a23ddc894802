package aug6_heapmaking;

import java.util.ArrayList;

public class Hashmap<K, V> {
	private class HMnode {
		K key;
		V value;
	}

	private GenericLL<HMnode>[] buckets;
	private int size = 0;

	public Hashmap() {
		buckets = new GenericLL[4];
		for (int i = 0; i < buckets.length; i++) {
			buckets[i] = new GenericLL<>();
		}
	}

	public void put(K key, V value) throws Exception {
		int bi = hashfunction(key);
		int foundat = findat(buckets[bi], key);
		if (foundat == -1) {
			HMnode make = new HMnode();
			make.key = key;
			make.value = value;
			this.size++;
			buckets[bi].addlast(make);
		} else {
			HMnode val = new HMnode();
			val = buckets[bi].getmid(foundat);
			val.value = value;
		}

		double lambda = (size * 1.0) / buckets.length;
		if (lambda > 2.0) {
			rehash();
		}
	}

	private void rehash() {
		GenericLL<HMnode>[] temp = this.buckets;
		buckets = new GenericLL[2 * temp.length];
		for (int i = 0; i < buckets.length; i++) {
			buckets[i] = new GenericLL<>();
		}
		size = 0;

		for (int i = 0; i < temp.length; i++) {
			for (int j = 0; j < temp[i].size(); j++) {

			}
		}

	}

	private int findat(GenericLL<Hashmap<K, V>.HMnode> genericLL, K key) throws Exception {
		for (int i = 0; i < genericLL.size(); i++) {
			HMnode val = new HMnode();
			val = genericLL.getmid(i);
			if (val.key.equals(key)) {
				return i;
			}
		}
		return -1;
	}

	private int hashfunction(K key) {
		int c = key.hashCode();
		c = Math.abs(c);
		c = c % buckets.length;
		return c;
	}

	public V get(K key) throws Exception {
		int bi = hashfunction(key);
		int foundat = findat(buckets[bi], key);
		if (foundat == -1) {
			return null;
		} else {
			HMnode val = new HMnode();
			val = buckets[bi].getmid(foundat);
			return val.value;
		}
	}

	public V remove(K key) throws Exception {
		int bi = hashfunction(key);
		int foundat = findat(buckets[bi], key);
		if (foundat == -1) {
			return null;
		} else {
			HMnode val = new HMnode();
			val = buckets[bi].remmid(foundat);
			this.size--;
			return val.value;
		}
	}

	public boolean containsKey(K key) throws Exception {
		int bi = hashfunction(key);
		int foundat = findat(buckets[bi], key);
		if (foundat == -1) {
			return false;
		} else {
			return true;
		}
	}

	public int size() {
		return this.size;
	}

	public boolean isEmpty() {
		return this.size == 0;
	}

	public ArrayList<K> keyset() throws Exception {
		ArrayList<K> ans = new ArrayList<>();
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < buckets[i].size(); j++) {
				ans.add(buckets[i].remmid(j).key);
			}
		}
		return ans;
	}

	public ArrayList<V> valset() throws Exception {
		ArrayList<V> ans = new ArrayList<>();
		for (int i = 0; i < buckets.length; i++) {
			for (int j = 0; j < buckets[i].size(); j++) {
				ans.add(buckets[i].remmid(j).value);
			}
		}
		return ans;
	}

	public void display() throws Exception {
		for (int i = 0; i < buckets.length; i++) {
			String str = "Bucket " + i + " => ";
			for (int j = 0; j < buckets[i].size(); j++) {
				str += " [ " + buckets[i].remmid(j).key + "--->" + buckets[i].remmid(j).value + " ] ";
			}
			System.out.println(str + ".");
		}
		System.out.println("\n----------------------------------------\n");
	}
}
